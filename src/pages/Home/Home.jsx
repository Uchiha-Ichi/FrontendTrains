  // import styles from "./Home.module.scss";
  // import React from "react";
  // import ReactDOM from "react-dom";
  // import Calendar from "../../components/Calendar/Calendar";
  // import Input from "../../components/Input/Input";
  // import Button from "../../components/Button/Button";

  // export default function Home() {
  //   return (
  //     <div className={styles.main}>
  //       <Calendar />
  //       <div className={styles.mainRight}>
  //         <Input colorScheme={"primary"} label={"Ga ƒëi?"} id={"from"} />
  //         <Input colorScheme={"primary"} label={"Ga ƒë·∫øn?"} id={"to"} />
  //         <Button>T√¨m ki·∫øm</Button>
  //       </div>
  //     </div>
  //   );
  // }


  // import styles from "./Home.module.scss";
  // import React, { useState } from "react";
  // import { useDispatch, useSelector } from "react-redux";
  // import { searchTrains } from "../../redux/stationSearchSlice";
  // import { fetchStationSuggestions, clearSuggestions } from "../../redux/stationAutoCompleteSlice";
  // import Calendar from "../../components/Calendar/Calendar";
  // import Input from "../../components/Input/Input";
  // import Button from "../../components/Button/Button";

  // export default function Home() {
  //     const dispatch = useDispatch();
  //     const { suggestions } = useSelector((state) => state.stationAutoComplete);
  //     console.log("üöÄ Danh s√°ch g·ª£i √Ω:", suggestions);
  //     const { results, loading, error } = useSelector((state) => state.stationSearch);

  //     const [searchData, setSearchData] = useState({ from: "", to: "", date: "" });

  //     const handleInputChange = (e) => {
  //         const { id, value } = e.target;
  //         setSearchData((prev) => ({ ...prev, [id]: value }));

  //         if (value.length > 1) {
  //             dispatch(fetchStationSuggestions(value)); // G·ªçi API g·ª£i √Ω ga
  //         } else {
  //             dispatch(clearSuggestions());
  //         }
  //     };

  //     const handleSelectStation = (station, field) => {
  //         setSearchData((prev) => ({ ...prev, [field]: station }));
  //         dispatch(clearSuggestions());
  //     };

  //     const handleSearch = () => {
  //         if (!searchData.from || !searchData.to || !searchData.date) {
  //             alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
  //             return;
  //         }
  //         dispatch(searchTrains(searchData));
  //     };

  //     return (
  //         <div className={styles.main}>
  //             <Calendar onDateChange={(date) => setSearchData({ ...searchData, date })} />
  //             <div className={styles.mainRight}>
  //                 <div className={styles.inputWrapper}>
  //                     <Input
  //                         colorScheme="primary"
  //                         label="Ga ƒëi?"
  //                         id="from"
  //                         value={searchData.from}
  //                         onChange={handleInputChange}
  //                     />
  //                     {suggestions.length > 0 && (
  //                         <ul className={styles.suggestions}>
  //                             {suggestions.map((station) => (
  //                                 <li key={station.id} onClick={() => handleSelectStation(station.name, "from")}>
  //                                     {station.name}
  //                                 </li>
  //                             ))}
  //                         </ul>
  //                     )}
  //                 </div>

  //                 <div className={styles.inputWrapper}>
  //                     <Input
  //                         colorScheme="primary"
  //                         label="Ga ƒë·∫øn?"
  //                         id="to"
  //                         value={searchData.to}
  //                         onChange={handleInputChange}
  //                     />
  //                     {suggestions.length > 0 && (
  //                         <ul className={styles.suggestions}>
  //                             {suggestions.map((station) => (
  //                                 <li key={station.id} onClick={() => handleSelectStation(station.name, "to")}>
  //                                     {station.name}
  //                                 </li>
  //                             ))}
  //                         </ul>
  //                     )}
  //                 </div>

  //                 <Button onClick={handleSearch}>T√¨m ki·∫øm</Button>
  //             </div>

  //             {/* K·∫øt qu·∫£ t√¨m ki·∫øm */}
  //             <div className={styles.results}>
  //                 {loading && <p>ƒêang t√¨m ki·∫øm...</p>}
  //                 {error && <p className={styles.error}>L·ªói: {error}</p>}
  //                 {results.length > 0 && (
  //                     <ul>
  //                         {results.map((train) => (
  //                             <li key={train.id}>
  //                                 <p><strong>T√†u:</strong> {train.trainCode}</p>
  //                                 <p><strong>Kh·ªüi h√†nh:</strong> {train.departureTime}</p>
  //                                 <p><strong>ƒê·∫øn n∆°i:</strong> {train.arrivalTime}</p>
  //                             </li>
  //                         ))}
  //                     </ul>
  //                 )}
  //             </div>
  //         </div>
  //     );
  // }



  // import styles from "./Home.module.scss";
  // import React, { useState } from "react";
  // import { useDispatch, useSelector } from "react-redux";
  // import { searchTrains } from "../../redux/stationSearchSlice";
  // import {
  //   fetchStationSuggestions,
  //   clearSuggestions,
  //   setActiveField,
  // } from "../../redux/stationAutoCompleteSlice";
  // import { debounce } from "lodash";
  // import Calendar from "../../components/Calendar/Calendar";
  // import Input from "../../components/Input/Input";
  // import Button from "../../components/Button/Button";
  // import { toast, ToastContainer } from "react-toastify";
  // import "react-toastify/dist/ReactToastify.css";
  
  // export default function Home() {
  //   const dispatch = useDispatch();
  //   const { suggestions, loading: suggestionsLoading, activeField } = useSelector(
  //     (state) => state.stationAutoComplete
  //   );
  //   const { results, loading, error } = useSelector((state) => state.stationSearch);
  
  //   const [searchData, setSearchData] = useState({ from: "", to: "", date: "" });
  
  //   const debouncedFetchSuggestions = debounce((value) => {
  //     dispatch(fetchStationSuggestions(value));
  //   }, 300);
  
  //   const handleInputChange = (e) => {
  //     const { id, value } = e.target;
  //     setSearchData((prev) => ({ ...prev, [id]: value }));
  //     dispatch(setActiveField(id));
  
  //     if (value.length > 1) {
  //       debouncedFetchSuggestions(value);
  //     } else {
  //       dispatch(clearSuggestions());
  //     }
  //   };
  
  //   const handleSelectStation = (station, field) => {
  //     setSearchData((prev) => ({ ...prev, [field]: station }));
  //     dispatch(clearSuggestions());
  //   };
  
  //   const handleSearch = () => {
  //     if (!searchData.from || !searchData.to || !searchData.date) {
  //       toast.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
  //       return;
  //     }
  //     dispatch(searchTrains(searchData));
  //   };
  
  //   return (
  //     <div className={styles.main}>
  //       {/* Th√™m ToastContainer ·ªü ƒë√¢y */}
  //       <ToastContainer
  //         position="top-right" // V·ªã tr√≠ th√¥ng b√°o
  //         autoClose={3000}   // T·ª± ƒë·ªông ƒë√≥ng sau 3 gi√¢y
  //         hideProgressBar={false}
  //         newestOnTop={false}
  //         closeOnClick
  //         rtl={false}
  //         pauseOnFocusLoss
  //         draggable
  //         pauseOnHover
  //       />
  //       <Calendar onDateChange={(date) => setSearchData({ ...searchData, date })} />
  //       <div className={styles.mainRight}>
  //         <div className={styles.inputWrapper}>
  //           <Input
  //             colorScheme="primary"
  //             label="Ga ƒëi?"
  //             id="from"
  //             value={searchData.from}
  //             onChange={handleInputChange}
  //           />
  //           {suggestionsLoading && activeField === "from" && <p>ƒêang t·∫£i g·ª£i √Ω...</p>}
  //           {suggestions.length > 0 && activeField === "from" && !suggestionsLoading && (
  //             <ul className={styles.suggestions}>
  //               {suggestions.map((station) => (
  //                 <li key={station.id} onClick={() => handleSelectStation(station.name, "from")}>
  //                   {station.name}
  //                 </li>
  //               ))}
  //             </ul>
  //           )}
  //         </div>
  
  //         <div className={styles.inputWrapper}>
  //           <Input
  //             colorScheme="primary"
  //             label="Ga ƒë·∫øn?"
  //             id="to"
  //             value={searchData.to}
  //             onChange={handleInputChange}
  //           />
  //           {suggestionsLoading && activeField === "to" && <p>ƒêang t·∫£i g·ª£i √Ω...</p>}
  //           {suggestions.length > 0 && activeField === "to" && !suggestionsLoading && (
  //             <ul className={styles.suggestions}>
  //               {suggestions.map((station) => (
  //                 <li key={station.id} onClick={() => handleSelectStation(station.name, "to")}>
  //                   {station.name}
  //                 </li>
  //               ))}
  //             </ul>
  //           )}
  //         </div>
  
  //         <Button onClick={handleSearch}>T√¨m ki·∫øm</Button>
  //       </div>
  
  //       <div className={styles.results}>
  //         {loading && <p>ƒêang t√¨m ki·∫øm...</p>}
  //         {error && <p className={styles.error}>L·ªói: {error}</p>}
  //         {results.length > 0 && (
  //           <ul>
  //             {results.map((train) => (
  //               <li key={train.id}>
  //                 <p><strong>T√†u:</strong> {train.trainCode}</p>
  //                 <p><strong>Kh·ªüi h√†nh:</strong> {train.departureTime}</p>
  //                 <p><strong>ƒê·∫øn n∆°i:</strong> {train.arrivalTime}</p>
  //               </li>
  //             ))}
  //           </ul>
  //         )}
  //       </div>
  //     </div>
  //   );
  // }











//   import styles from "./Home.module.scss";
// import React, { useState } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import { searchTrains } from "../../redux/stationSearchSlice";
// import {
//   fetchStationSuggestions,
//   clearSuggestions,
//   setActiveField,
// } from "../../redux/stationAutoCompleteSlice";
// import { debounce } from "lodash";
// import Calendar from "../../components/Calendar/Calendar";
// import Input from "../../components/Input/Input";
// import Button from "../../components/Button/Button";
// import { toast, ToastContainer } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";

// export default function Home() {
//   const dispatch = useDispatch();
//   const { suggestions, loading: suggestionsLoading, activeField } = useSelector(
//     (state) => state.stationAutoComplete
//   );
//   console.log("üöÄ Danh s√°ch g·ª£i √Ω:", suggestions);
//   const { results, loading, error } = useSelector((state) => state.stationSearch);

//   const [searchData, setSearchData] = useState({ from: "", to: "", date: "" });

//   const debouncedFetchSuggestions = debounce((value) => {
//     dispatch(fetchStationSuggestions(value));
//   }, 300);

//   const handleInputChange = (e) => {
//     const { id, value } = e.target;
//     setSearchData((prev) => ({ ...prev, [id]: value }));
//     dispatch(setActiveField(id)); // G·ªçi action setActiveField

//     if (value.length > 1) {
//       debouncedFetchSuggestions(value);
//     } else {
//       dispatch(clearSuggestions());
//     }
//   };

//   const handleSelectStation = (station, field) => {
//     setSearchData((prev) => ({ ...prev, [field]: station }));
//     dispatch(clearSuggestions());
//   };

//   const handleSearch = () => {
//     if (!searchData.from || !searchData.to || !searchData.date) {
//       toast.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
//       return;
//     }
//     dispatch(searchTrains(searchData));
//   };

//   return (
//     <div className={styles.main}>
//       <ToastContainer />
//       <Calendar onDateChange={(date) => setSearchData({ ...searchData, date })} />
//       <div className={styles.mainRight}>
//         <div className={styles.inputWrapper}>
//           <Input
//             colorScheme="primary"
//             label="Ga ƒëi?"
//             id="from"
//             value={searchData.from}
//             onChange={handleInputChange}
//           />
//           {suggestionsLoading && activeField === "from" && <p>ƒêang t·∫£i g·ª£i √Ω...</p>}
//           {suggestions.length > 0 && activeField === "from" && !suggestionsLoading && (
//             <ul className={styles.suggestions}>
//               {suggestions.map((station) => (
//                 <li key={station.id} onClick={() => handleSelectStation(station.name, "from")}>
//                   {station.name}
//                 </li>
//               ))}
//             </ul>
//           )}
//         </div>

//         <div className={styles.inputWrapper}>
//           <Input
//             colorScheme="primary"
//             label="Ga ƒë·∫øn?"
//             id="to"
//             value={searchData.to}
//             onChange={handleInputChange}
//           />
//           {suggestionsLoading && activeField === "to" && <p>ƒêang t·∫£i g·ª£i √Ω...</p>}
//           {suggestions.length > 0 && activeField === "to" && !suggestionsLoading && (
//             <ul className={styles.suggestions}>
//               {suggestions.map((station) => (
//                 <li key={station.id} onClick={() => handleSelectStation(station.name, "to")}>
//                   {station.name}
//                 </li>
//               ))}
//             </ul>
//           )}
//         </div>

//         <Button onClick={handleSearch}>T√¨m ki·∫øm</Button>
//       </div>

//       <div className={styles.results}>
//         {loading && <p>ƒêang t√¨m ki·∫øm...</p>}
//         {error && <p className={styles.error}>L·ªói: {error}</p>}
//         {results.length > 0 && (
//           <ul>
//             {results.map((train) => (
//               <li key={train.id}>
//                 <p><strong>T√†u:</strong> {train.trainCode}</p>
//                 <p><strong>Kh·ªüi h√†nh:</strong> {train.departureTime}</p>
//                 <p><strong>ƒê·∫øn n∆°i:</strong> {train.arrivalTime}</p>
//               </li>
//             ))}
//           </ul>
//         )}
//       </div>
//     </div>
//   );
// }



import styles from "./Home.module.scss";
import React, { useState, useEffect  } from "react";
import { useDispatch, useSelector } from "react-redux";
import { searchTrains } from "../../redux/stationSearchSlice";
import {
  fetchStationSuggestions,
  fetchAllStations,
  clearSuggestions,
  setActiveField,
} from "../../redux/stationAutoCompleteSlice";
import { debounce } from "lodash";
import Calendar from "../../components/Calendar/Calendar";
import Input from "../../components/Input/Input";
import Button from "../../components/Button/Button";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function Home() {
  const dispatch = useDispatch();
  const { suggestions, allStations, loading: suggestionsLoading, activeField } = useSelector(
    (state) => state.stationAutoComplete
  );
  const { results, loading, error } = useSelector((state) => state.stationSearch);

  const [searchData, setSearchData] = useState({ from: "", to: "", date: "" });
  const [errors, setErrors] = useState({ from: "", to: "", date: "" }); // Th√™m tr·∫°ng th√°i l·ªói

    // G·ªçi API l·∫•y to√†n b·ªô danh s√°ch ga khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    dispatch(fetchAllStations());
  }, [dispatch]);

  const debouncedFetchSuggestions = debounce((value) => {
    dispatch(fetchStationSuggestions(value));
  }, 300);

  const handleInputChange = (e) => {
    const { id, value } = e.target;
    setSearchData((prev) => ({ ...prev, [id]: value }));
    dispatch(setActiveField(id)); // ƒê·∫∑t activeField
    // X√≥a l·ªói khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu nh·∫≠p l·∫°i
    setErrors((prev) => ({ ...prev, [id]: "" }));

    console.log("Active field:", id); // Debug: Ki·ªÉm tra activeField
    console.log("Input value:", value); // Debug: Ki·ªÉm tra gi√° tr·ªã nh·∫≠p

    if (value.length > 1) {
      debouncedFetchSuggestions(value);
    } else {
      dispatch(clearSuggestions());
    }
  };

  const handleSelectStation = (station, field) => {
    setSearchData((prev) => ({ ...prev, [field]: station.stationName }));
    dispatch(clearSuggestions());
    dispatch(setActiveField(null)); // ƒê·∫∑t l·∫°i activeField sau khi ch·ªçn
    // X√≥a l·ªói khi ng∆∞·ªùi d√πng ch·ªçn ga t·ª´ danh s√°ch g·ª£i √Ω
    setErrors((prev) => ({ ...prev, [field]: "" }));
  };

  const handleSearch = () => {
    let newErrors = { from: "", to: "", date: "" };
    let hasError = false;

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ga tr∆∞·ªõc
    if (searchData.from) {
      const isFromValid = allStations.some(
        (station) => station.stationName.toLowerCase() === searchData.from.toLowerCase()
      );
      if (!isFromValid) {
        newErrors.from = "Ga kh√¥ng h·ª£p l·ªá";
        hasError = true;
      }
    }

    if (searchData.to) {
      const isToValid = allStations.some(
        (station) => station.stationName.toLowerCase() === searchData.to.toLowerCase()
      );
      if (!isToValid) {
        newErrors.to = "Ga kh√¥ng h·ª£p l·ªá";
        hasError = true;
      }
    }

    // Ki·ªÉm tra c√°c tr∆∞·ªùng tr·ªëng
    if (!searchData.from) {
      newErrors.from = "Vui l√≤ng nh·∫≠p ga ƒëi";
      hasError = true;
    }
    if (!searchData.to) {
      newErrors.to = "Vui l√≤ng nh·∫≠p ga ƒë·∫øn";
      hasError = true;
    }
    if (!searchData.date) {
      newErrors.date = "Vui l√≤ng ch·ªçn ng√†y";
      hasError = true;
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói
    setErrors(newErrors);

    // N·∫øu c√≥ l·ªói, kh√¥ng ti·∫øp t·ª•c t√¨m ki·∫øm
    if (hasError) {
      return;
    }

    // N·∫øu kh√¥ng c√≥ l·ªói, ti·∫øn h√†nh t√¨m ki·∫øm
    dispatch(searchTrains(searchData));
  };

  // Debug: Ki·ªÉm tra ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã
  console.log("Suggestions:", suggestions);
  console.log("Active field (state):", activeField);
  console.log("Suggestions length:", suggestions.length);
  console.log("Should show suggestions for 'from':", suggestions.length > 0 && activeField === "from");
  console.log("Should show suggestions for 'to':", suggestions.length > 0 && activeField === "to");


  return (
    <div className={styles.main}>
      <ToastContainer />
      <div className={styles.container}>
        {/* L·ªãch b√™n tr√°i */}
        <div className={styles.calendarWrapper}>
          <p className={styles.dateLabel}>
            Ng√†y kh·ªüi h√†nh: {searchData.date || "Ch∆∞a ch·ªçn"}
          </p>
          {errors.date && <p className={styles.error}>{errors.date}</p>}
          <Calendar
            onDateChange={(date) => {
              setSearchData({ ...searchData, date });
              setErrors((prev) => ({ ...prev, date: "" })); // X√≥a l·ªói ng√†y khi ch·ªçn
            }}
          />
        </div>

        {/* √î nh·∫≠p li·ªáu b√™n ph·∫£i */}
        <div className={styles.mainRight}>
          <div className={styles.inputWrapper}>
            <Input
              colorScheme="primary"
              label="Ga ƒëi?"
              id="from"
              value={searchData.from}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p ga ƒëi"
            />
            {errors.from && <p className={styles.error}>{errors.from}</p>}
            {suggestionsLoading && activeField === "from" && (
              <p className={styles.loading}>ƒêang t·∫£i g·ª£i √Ω...</p>
            )}
            {suggestions.length > 0 && activeField === "from" && !suggestionsLoading && (
              <ul className={styles.suggestions}>
                {suggestions.map((station) => (
                  <li
                    key={station.stationId}
                    onClick={() => handleSelectStation(station, "from")}
                    className={styles.suggestionItem}
                  >
                    {station.stationName}
                  </li>
                ))}
              </ul>
            )}
          </div>

          <div className={styles.inputWrapper}>
            <Input
              colorScheme="primary"
              label="Ga ƒë·∫øn?"
              id="to"
              value={searchData.to}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p ga ƒë·∫øn"
            />
            {errors.to && <p className={styles.error}>{errors.to}</p>}
            {suggestionsLoading && activeField === "to" && (
              <p className={styles.loading}>ƒêang t·∫£i g·ª£i √Ω...</p>
            )}
            {suggestions.length > 0 && activeField === "to" && !suggestionsLoading && (
              <ul className={styles.suggestions}>
                {suggestions.map((station) => (
                  <li
                    key={station.stationId}
                    onClick={() => handleSelectStation(station, "to")}
                    className={styles.suggestionItem}
                  >
                    {station.stationName}
                  </li>
                ))}
              </ul>
            )}
          </div>

          <Button onClick={handleSearch}>T√¨m ki·∫øm</Button>
        </div>
      </div>

      {/* K·∫øt qu·∫£ t√¨m ki·∫øm */}
      <div className={styles.results}>
        {loading && <p>ƒêang t√¨m ki·∫øm...</p>}
        {error && <p className={styles.error}>{error}</p>}
        {results.length > 0 && (
          <ul>
            {results.map((train) => (
              <li key={train.id}>
                <p>
                  <strong>T√†u:</strong> {train.trainCode}
                </p>
                <p>
                  <strong>Kh·ªüi h√†nh:</strong> {train.departureTime}
                </p>
                <p>
                  <strong>ƒê·∫øn n∆°i:</strong> {train.arrivalTime}
                </p>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}
